{"pages":[],"posts":[{"title":"TEST","text":"제목안녕하세요","link":"/2021/01/05/TEST/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2021/01/04/hello-world/"},{"title":"연습","text":"markdown 오늘 배운 내용 hexo markdown 오늘 만난 사람 오늘 생각한 아이디어 오늘은 markdown을 살짝 배웠어요!! 구글링 해서 찾아봐야지!!구글링하러 gogo!! 12345678910111213141516171819202122232425262728# markdown### 개요 ------TIL ( Today I Learned ) 블로그를 하는 목적- markdown ([총정리블로그](https://heropy.blog/2017/09/30/markdown/) ) &amp; vim 숙련- 잔디밭&lt;br&gt;#### 최근 들은 세션------1. 처음 시작하는 Git/Github 활용하기 ( OOS 개발자 포럼, 박희찬슈퍼 개발자님 ) [강의자료](https://bit.ly/git-starter)&lt;br&gt;#### 학습할자료------[슈퍼어메이징한터미널세팅](https://johngrib.github.io/wiki/my-mac-os-terminal/?fbclid=IwAR2QRRoeZv6L2sMbwmecLI5xJRObKmFHwxPmQ8OqR06w31Q8LcIpRijIfVs)[초보몽키개발공부로그](https://wayhome25.github.io/)[hexo적용한블로그태마깃헙](https://github.com/ppoffice/hexo-theme-icarus)[hexo적용한블로그사용법페이지](https://blog.zhangruipeng.me/hexo-theme-icarus/)[재원님disqus댓글기능추가하는방법](https://cresumerjang.github.io/2019/11/17/hexo-add-comments/?fbclid=IwAR0bHcNEprnoP1-28DVBkGq32MXaN_e4jGmhsF03XCNZsOgyzxj_aTkaHrU)&lt;br&gt;","link":"/2021/01/05/%EC%97%B0%EC%8A%B5/"},{"title":"스프링부트_시작하기","text":"* 스프링 부트와 AWS로 혼자 구현하는 웹 서비스(프리렉, 이동욱 지음)책을 통해 공부한 내용을 정리한 글입니다. * 목록 그레이들 프로젝트 변경 코드 설명 그레이들 프로젝트 변경먼저 intellij에서 gradle기반의 자바 프로젝트를 생성합니다.프로젝트 생성후 build.gradle 파일을 열어 보면 다음과 같은 코드가 있습니다. build.gradle 초기 상태12345678910111213141516plugins: { 'java'}group 'com.doop.book'version '1.0-SNAPSHOT'sourceCompatibility = 1.8repositories { mavenCentral()}dependencies { testCompile group: 'junit', name: 'junit', version: '4.12'} 이 코드들은 자바 개발에 가장 기초적인 설정만 되어있는 상태입니다. 이 코드에 스프링 부트에 필요한 설정들을 추가해 봅시다. build.gradle 수정후123456789101112131415161718192021222324252627282930buildscript { ext { springBootVersion = '2.1.7.RELEASE' } repositories { mavenCentral() jcenter() } dependencies { classpath(&quot;org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}&quot;) }}apply plugin: 'java'apply plugin: 'eclipse'apply plugin: 'org.springframework.boot'apply plugin: 'io.spring.dependency-management'group 'com.doop.book'version '1.0-SNAPSHOT'sourceCompatibility = 1.8repositories { mavenCentral()}dependencies { compile('org.springframework.boot:spring-boot-starter-web') testCompile('org.springframework.boot:spring-boot-starter-test')} 코드 설명123456789101112buildscript { ext { springBootVersion = '2.1.7.RELEASE' } repositories { mavenCentral() jcenter() } dependencies { classpath(&quot;org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}&quot;) }} 이 코드는 프로젝트의 플러그인 의존성 관리를 위한 설정입니다.(인텔리제이의 플러그인 관리는 아님니다.)ext 라는 키워드는 build.gradle에서 사용하는 전역변수를 전역변수로 사용하겠다는 의미인데, 이 코드에서는 springBootVersion 라는 전역변수를 선언 후 값을 2.1.7.RELEASE로 하겠다는 의미입니다.classpath줄은 ‘spring-boot-gradle-plugin’ 라는 스프링 부트 그레이들 플러그인의 2.1.7.RELEASE를 의존성으로 받겠다는 의미입니다. 1234apply plugin: 'java'apply plugin: 'eclipse'apply plugin: 'org.springframework.boot'apply plugin: 'io.spring.dependency-management' 위의 플러그인 4개는 자바와 스프링 부트를 사용하기 위한 필수 플러그인입니다.io.spring.dependency.management 플러그인은 스프링 부트의 의존성을 관리해 주는 플러그인이라 꼭 추가해야 합니다. 123456789repositories { mavenCentral() jcenter()}dependencies { compile('org.springframework.boot:spring-boot-starter-web') testCompile('org.springframework.boot:spring-boot-starter-test')} repositories 각종 의존성(라이브러리)들을 어떤 원격 저장소에서 받을지를 정합니다. 기본적으로 mavenCentral을 많이 사용하지만, 최근에는 라이브러리 업로드 난이도 때문에 jcenter도 많이 사용합니다. dependencies 프로젝트 개발에 필요한 의존성들을 선언하는 곳입니다. 인텔리제이는 메이븐 저장소의 데이터를 인덱싱해서 관리하기 때문에 의존성 자동완성이 가능합니다. complie 메소드 안에 라이브러리의 이름의 앞부분만 추가한 뒤 자동완성(Ctrl+Space) 을 사용하면 라이브러리 목록을 확인 할 수 있습니다. 의존성 코드는 직접 작성해도 되고, 자동완성으로 작성해도 됩니다. 단, 특정 버전을 명시하면 안 됩니다. 왜냐하면 버전을 명시하지 않아야만 맨위에 작성한 org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion} 의 버전을 따라가게 됩니다. build.gradle에 반영하기코드 설정이 끝이나면 오른쪽 하단에 Event Log에서 build.gradle에 변경이 있으니 반영하라 라는 알람이 나옵니다.[Import Changes]는 1회 변경을 허용하는 것이고, [Enable Auto-Import]는 수정될때 마다 자동으로 반영이 되는 것입니다.(필자는 이것이 나오지 않아 수동으로 반영하였다.) build 적용이 안될 시오류가 뜬다면 gradle의 버전을 확인해 봅시다.터미널에 다음과 같은 명령어를 치면 그레이들의 버전을 확인할수 있습니다. 1gradlew --version 버전이 5.x.x라면 4.x.x 로 바꾸어 줍니다. 1gradlew wrapper --gradle-version 4.10.2","link":"/2021/01/06/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/"},{"title":"테스트코드_작성하기","text":"* 스프링 부트와 AWS로 혼자 구현하는 웹 서비스(프리렉, 이동욱 지음)책을 통해 공부한 내용을 정리한 글입니다. * 목록 TDD와 단위 테스트 TDD 단위 테스트 테스트 코드를 작성하는 이유 테스트 코드 작성하기 main 클래스 작성하기 내장 WAS를 사용을 권장하는 이유 test 코드 작성하기 자바 롬복(Lombok) 설치 Hello Controller 코드 롬복으로 전환하기 assertj의 장점 TDD와 단위 테스트TDD테스트가 주도하는 개발을 이야기합니다. 테스트 코드를 먼저 작성하는 것부터 시작합니다.TDD는 3단계로 이루어져 있습니다. RED : 항상 실패하는 테스트를 작성하기 GREEN : 테스트가 통과하는 프로덕션 코드를 작성하기 REFACTOR : 테스트가 통과하면 프로덕션 코드를 리펙토링하기 단위 테스트TDD의 첫 번쨰 단계인 기능 단위의 테스트 코드를 작성하는 것을 이야기 합니다.TDD와 달리 테스트 코드를 꼭 먼저 작성해야 하는 것도 아니고 리팩토링도 포함되지 않습니다.순수하게 트스트 코드만 작성하는 것을 이야기합니다. 테스트 코드를 작성하는 이유 단위 테스트는 개발단계 초기에 문제를 발견하게 도와줍니다. 단위 테스트는 개발자가 나중에 코드를 리팩토링하거나 라이브러리 업그레이드 등에서 기존 기능이 올바르게 작동하는지 확일 할 수 있습니다. 단위 테스트는 기능에 대한 불확실성을 감소시킬 수 있습니다. 단위 테스트는 시스템에 대한 실제 문서를 제공합니다. 즉 단위 테스트 자체가 문서로 사용할 수 있습니다. 테스트 코드 작성하기main클레스 작성하기src/main/java 디렉토리에 패키지를 생성합니다.패키지 명은 웹 사이트 주소의 역순으로 합니다. ex) AAAA.BBBB.com(주소) &gt;&gt; com.BBBB.AAAA(패키지) 패키지 생성후 생성한 패키지에 Application이라는 Java클래스를 생성합니다.다음과 같이 코드를 작성해 봅시다. src/main/패키지명/Application1234567891011package 패키지명;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;@SpringBootApplicationpublic class Application { public static void main(String[] args) { SpringApplication.run(Application.class, args); }} 방금 생성한 Application 클래스는 앞으로 만들 프로젝트의 메인 클래스가 됩니다.작성한 코드를 설명하자면@SpringBootApplication의 선언으로 인해 스프링 부트의 자동 설정, 스프링 Bean 읽기와 생성을 모두 자동으로 설정됩니다. 특히 @SpringBootApplication이 있는 위치부터 설정을 읽어 가기 때문에 이 클래스는 항상 프로젝트의 최상단에 위치해야만 합니다.main 메소드에서 SpringApplication.run으로 인해 내장 WAS를 실행합니다. 내장 WAS를 사용을 권장하는 이유‘언제 어디서나 같은 환경에서 스프링 부트를 배포’ 할수 있기 때문입니다.외장 WAS를 사용한다고 하면 모든 서버는 WAS의 종류와 버전, 설정등이 동일한 서버환경을 구축해야만 합니다. 만약 WAS의 버전을 올린다고하면 서버의 수가 적으면 괜찮지만 서버의 수가 많으면 실수할 여지가 늘어나게되고 시간이 많이 필요한 작업이 될 수도 있습니다. 방금 생성한 패키지 하위에 web이라는 패키지를 만들고 HelloController라는 Java클래스를 생성합니다.HelloController클래스에 다음과 같은 코드를 작성합니다. src/main/패키지명/web/HelloController1234567891011121314package 패키지명.web;import com.doop.book.springboot.web.dto.HelloResponseDto;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;@RestControllerpublic class HelloController { @GetMapping(&quot;hello&quot;) public String hello() { return &quot;hello&quot;; }} @RestController 컨트롤러를 JSON을 반환하는 컨트롤러로 만들어줍니다. 예전에는 @ResponseBody를 각 메소드마다 선언했던 것을 한번에 사용할 수 있게 해준다고 생각하면 됩니다. GetMapping Http Method인 Get의 요청을 받을 수 있는 API를 만들어 줍니다. 예전에는 @RequestMapping(method = RequestMethod.GET)으로 사용되었습니다. 이제 이 프로젝트는 /hello로 요청이 오면 문자열 hello를 반환하는 기능을 가지게 되었습니다. test 코드 작성하기src/test/java디렉토리에 패키지명.web패키지를 생성하고 테스트 코드를 작성할 HelloControllerTest클래스를 생성합니다.일반적으로 테스트 클래스는 대상 클래스 이름에 Test를 붙입니다.생성된 클래스에 다음과 같은 테스트 코드를 추가합니다. src/test/패키지명/web/HelloControllerTest12345678910111213141516171819202122232425262728import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;import org.springframework.test.context.junit4.SpringRunner;import org.springframework.test.web.servlet.MockMvc;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;@RunWith(SpringRunner.class)@WebMvcTest(controllers = HelloController.class)public class HelloControllerTest { @Autowired private MockMvc mvc; @Test public void hello가_리턴된다() throws Exception { String hello = &quot;hello&quot;; mvc.perform(get(&quot;/hello&quot;)) .andExpect(status().isOk()) .andExpect(content().string(hello)); }} @RunWith(SpringRunner.class) 테스트를 진행할 때 JUnit에 내장된 실행자 외에 다른 실행자를 실행시킵니다. 여기서는 SpringRunner라는 스프링 실행자를 사용합니다. 즉, 스프링 부트 테스트와 JUnit 사이에 연결자 역할을 합니다. @WebMvcTest 여러 스프링 테스트 어노테이션 중, Web(Spring MVC)에 집중할 수 있는 어노테이션 입니다. 선언할 경우 @Controller, @ControllerAdvice 등을 사용할 수 있습니다. 단, @Service, @Component, @Repository 등은 사용할 수 없습니다. 왜냐하면, 여기서는 컨트롤러만 사용하기 때문에 선언합니다. @Autowired 스프링이 관리하는 빈(Bean)을 주입 받습니다. private MockMvc mvc 웹 API를 테스트할 때 사용합니다. 스프링 MVC 테스트의 시작점입니다. 이 클래스를 통해 HTTP GET, POST 등에 대한 API 테스트를 할 수 있습니다. mvc.perform(get(“/hello”)) MockMvc를 통해 /hello 주소로 HTTP GET 요청을 합니다. 체이닝이 지원되어 아래와 같이 여러 검증 기능을 이어서 선언할 수 있습니다. .andExpect(status().isOk()) mvc.perform의 결과를 검증합니다. HTTP Header의 Statu를 검증합니다. 상태는 200, 404, 500 등의 상태를 검증합니다. 여기선 OK 즉, 200인지 아닌지 검증합니다. .andExpect(content().string(hello)); mvc.perform의 결과를 검증합니다. 응답 본문의 내용을 검증합니다. Controller에서 “hello”를 리턴하기 때문에 이 값이 맞는지 검증합니다. 코드를 모두 작성했다면, 테스트 코드를 한번 실행해봅시다.메소드 왼쪽의 초록색 화살표를 클릭합니다. 자바 롬복(Lombok)롬복(lombok) 은 자바 개발할 때 자주 사용하는 코드 Getter, Setter, 기본 생성자, toString 등을 어노테이션으로 자동 생성해줍니다. (자바 개발자들의 필수 라이브러리입니다.) 이클립스의 경우엔 롬복 설치가 번거롭지만, 인텔리제이에선 플러그인 덕분에 쉽게 설정이 가능합니다.우선 롬복을 사용하기 위해서 build.gradle 에서 dependencies영역 에 compile(‘org.projectlombok:lombok’)를 추가합니다. 설치build.gradle 의존성 추가12345dependencies { compile('org.springframework.boot:spring-boot-starter-web') compile('org.projectlombok:lombok') testCompile('org.springframework.boot:spring-boot-starter-test')} 롬복 플러그인 설치를 위해 Action(Ctrl + Shift + A) &gt;&gt; plugins 입력 하여 플러그인 설치 팝업 을 띄웁니다. marketplace 탭으로 이동하여 lombok을 검색하고 install 합니다. intelliJ를 재시작합니다. 재시작하면 오른쪽 하단에 롬복에 대한 설정이 필요하다라는 팝업이 뜨게되는데 파란색으로 표기된 설정 경로(Setting &gt; build &gt; Compiler &gt; Annotation Processors)를 클릭합니다. 경로로 들어가 Enable annotation processing을 체크 합니다. Hello Controller 코드 롬복으로 전환하기web패키지에 dto패키지를 추가합니다. 그리고 dto패키지에 HelloResponseDto를 생성합니다. src/main/패키지명/web/dto/HelloResponseDto123456789import lombok.Getter;import lombok.RequiredArgsConstructor;@Getter@RequiredArgsConstructorpublic class HelloResponseDto { private final String name; private final int amount;} @Getter 선언된 모든 필드의 get 메소드를 생성해 줍니다. @RequiredArgsConstructor 선언된 모든 final필드가 포함된 생성자를 생성해 줍니다. final이 없는 필드는 생성자에 포함되지 않습니다. Dto에 적용된 롬복이 잘 작동하는지 간단한 테스트 코드를 작성해봅시다. src/test/패키지명/web/dto/HelloResponseDtoTest12345678910111213141516171819import org.junit.Test;import static org.assertj.core.api.Assertions.assertThat;public class HelloResponseDtoTest { @Test public void 롬복_기능_테스트() { // given String name = &quot;test&quot;; int amount = 1000; // when HelloResponseDto dto = new HelloResponseDto(name, amount); // then assertThat(dto.getName()).isEqualTo(name); assertThat(dto.getAmount()).isEqualTo(amount); }} assertThat assertj라는 테스트 검증 라이브러리의 검증 메소드입니다. 검증하고 싶은 대상을 메소드 인자로 받습니다. 메소드 체이닝이 지원되어 isEqualTo와 같이 메소드를 이어서 사용할 수 있습니다. isEqualTo assertj의 동등 비교 메소드입니다. assertThat에 있는 값과 isEqualTo의 값을 비교해서 같을 때만 성공합니다. assertj의 장점Junit 과 비교하여 assertj의 장점은 다음과 같습니다. CoreMatchers와 달리 추가적으로 라이브러리가 필요하지 않습니다. Junit의 assertThat을 쓰게 되면 is()와 같이 CoreMatchers 라이브러리가 필요합니다. 자동완성이 좀 더 확실하게 지원도빈다. IDE에서는 CoreMatchers와 같은 Matcher 라이브러리의 자동완성 지원이 약합니다. 작성된 테스트 메소드를 실행해 봅니다.테스트 결과가 성공했다면, HelloController에 새로 만든 ResponseDto를 사용하도록 코드를 추가 합니다. 12345678910111213@RestControllerpublic class HelloController { @GetMapping(&quot;hello&quot;) public String hello() { return &quot;hello&quot;; } --추가하는 부분--- @GetMapping(&quot;/hello/dto&quot;) public HelloResponseDto helloDto(@RequestParam(&quot;name&quot;) String name,@RequestParam(&quot;amount&quot;) int amount) { return new HelloResponseDto(name, amount); }} @RequestParam 외부에서 API로 넘긴 파라미터를 가져오는 어노테이션입니다. 여기서는 외부에서 name(@RequestParam(“name”))이란 이름으로 넘긴 파라미터를 메소드 파라미터 name(String name)에 저장하게 됩니다. name과 amount는 API를 호출하는 곳에서 넘겨준 값들입니다. 추가된 API를 테스트 하는 코드를 HelloControllerTEst에 추가합니다. 12345678910111213141516171819202122232425262728293031323334353637383940414243import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;import org.springframework.test.context.junit4.SpringRunner;import org.springframework.test.web.servlet.MockMvc;import static org.hamcrest.Matchers.is;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;@RunWith(SpringRunner.class)@WebMvcTest(controllers = HelloController.class)public class HelloControllerTest { @Autowired private MockMvc mvc; @Test public void hello가_리턴된다() throws Exception { String hello = &quot;hello&quot;; mvc.perform(get(&quot;/hello&quot;)) .andExpect(status().isOk()) .andExpect(content().string(hello)); } @Test public void helloDto가_리턴된다() throws Exception { String name = &quot;hello&quot;; int amount = 1000; mvc.perform( get(&quot;/hello/dto&quot;) .param(&quot;name&quot;, name) // ...(1) .param(&quot;amount&quot;, String.valueOf(amount))) .andExpect(status().isOk()) .andExpect(jsonPath(&quot;$.name&quot;, is(name))) // ...(2) .andExpect(jsonPath(&quot;$.amount&quot;, is(amount))); }} param API 테스트할 때 사용될 요청 파라미터를 설정합니다. 단, 값은 String만 허용됩니다. 그래서 숫자/날짜 등의 데이터도 등록할 때는 문자열로 변경해야만 가능합니다. jsonPath JSON 응답값을 필드별로 검증할 수 있는 메소드입니다. $를 기준으로 필드명을 명시합니다. 여기서는 name과 amount를 검증하니 $.name, $.amount로 검증합니다.작성된 테스트 코드를 실행해 봅니다.","link":"/2021/01/09/%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1%ED%95%98%EA%B8%B0/"},{"title":"스프링부트에서 JPA로 데이터베이스 다루기","text":"목록 JPA소개 프로젝트에 Spring Data Jpa 적용하기 Spring Data JPA 테스트 코드 작성하기 등록/수정/조회 API 만들기 JPA Audtiting을 이용한 등록/수정 시간 자동화 JPA 소개&nbsp;현대의 웹 애플리케이션에서 관계형 데이터베이스(RDB, Relational Database) 는 빠질 수 없는 요소입니다.Oracle, MySQL, MSSQL등을 쓰지 않는 웹 애플리케이션은 거의 없습니다. 그러다 보니 객체를 관계형 데이터 베이스에서 관리하는 것이 무엇보다 중요합니다. &nbsp;관계형 데이터 베이스가 계속해서 웹 서비스의 중심이 되면서 모든 코드는 SQL중심이 되어갑니다.관계형 데이터 베이스는 SQL만 인식할 수 있기 때문입니다.SQL로만 가능하니 각 테이블마다 기본적인 CRUD(Create, Read, Update, Delete)SQL을 매번 생성해야 합니다. 개발자가 아무리 자바 클래스를 아름답게 설계해도, SQL을 통해야만 데이터 베이스에 저장하고 조회할 수 있습니다. 관계형 데이터 베이스를 사용해야만 하는 상황에서 SQL은 피할 수 없습니다. 즉, 테이블의 수가 많을 수록 단순 반복 작업이 늘어난다는 것입니다. 이런 단순 반복 작업의 문제 외에도 패러다임 불일치문제가 있습니다. 관계형 데이터 베이스는 어떻게 데이터를 저장할지에 초점이 맞춰진 기술입니다. 반대로 객체지향 프로그래밍 언어는 메시지를 기반으로 기능과 속성을 한 곳에서 관리하는 기술입니다.관계형 데이터 베이스와 객체지향 프로그래밍 언어의 패러다임이 다른데, 객체를 데이터 베이스에 저장하려고 하니 여러 문제가 발생합니다. 이를 패러다임 불일치라고 합니다. 객체지향 프로그래밍에서 부모가 되는 개체를 가져오기12User user = findUser();Group group = user.getGroup(); User와 Group은 부모-자식 관계임을 알 수 있다. 위의 코드에 데이터베이스를 추가12User user = userDao.findUser();Group group = groupDao.findGroup(user.getGroupId()); &nbsp;데이터베이스가 추가된 경우엔 User 따로, Group 따로 조회하게 됩니다.User와 Group이 어떤 관계 인지 알 수 있을까요?상속, 1:N 등 객체 모델링을 데이터베이스로는 구현할 수 없습니다. 그러다 보니 웹 애플리케이션 개발은 데이터 베이스 모델링에만 집중 하게 됩니다.JPA는 이런 문제점을 해결하기 위해 등장하게 됩니다. JPA는 서로 지향하는 바가 다른 2개의 영역(객체지향 - 관계형 데이터베이스)을 중간에서 패러다임 일치를 시켜 주기 위한 기술이다. 즉, 개발자는 객체지향적으로 프로그래밍을 하고, JPA가 이를 관계형 데이터베이스에 맞게 SQL을 대신 생성 해서 실행합니다. 개발자는 항상 객체지향적으로 코드를 표현할 수 있으니 더는 SQL에 종속적인 개발을 하지 않아도 됩니다. Spring Data JPA&nbsp;JPA는 인터페이스로서 자바 표준명세서입니다. 인터페이스인 JPA를 사용하기 위해서는 구현체가 필요합니다. 대표적으로 Hibernate, Eclipse, Link 등이 있습니다. 하지만 Spring에서 JPA를 사용할 때는 이 구현체들을 직접 다루진 않고 구현체들을 좀 더 쉽게 사용하고자 추상화시킨 Spring Data JPA라는 모듈을 이용하여 JPA기술을 다룹니다.이들의 관계를 다음과 같이 나타낼 수 있습니다. JPA ← Hibernate ← Spring Data JPA &nbsp;Hibernate 와 Spring Data JPA 은 서로 큰 차이가 없습니다. 그럼에도 스프링 진영에서는 Spring Data JPA를 개발했고, 이를 권장하고 있습니다.&nbsp;이렇게 한 단계 더 감싸놓은 Spring Data JPA가 등장한 이유는 크게 두가지가 있습니다. 구현체 교체의 용이성 저장소 교체의 용이성 &nbsp;‘구현체 교체의 용이성’**이란 **Hibernate 외에 다른 구현체로 쉽게 교체하기 위함입니다. Spring Data JPA 내부에서 구현체 매핑을 지원해주기 때문에 교체가 용이합니다. &nbsp;저장소 교체의 용이성이란 관계형 데이터베이스 외에 다른 저장소로 쉽게 교체하기 위함입니다. 서비스 초기에는 관계형 데이터베이스로 모든 기능을 처리했지만, 트래픽이 많아지면서 관계형 데이터베이스로는 감당이 안될 때가 올 수 있습니다. 이때 MongoDB로 교체가 필요하다면 개발자는 Spring Data JPA에서 Spring Data MongoDB로 의존성만 교체 하면 됩니다. &nbsp;이는 Spring Data의 하위 프로젝트들은 기본적인 CRUD의 인터페이스가 같기 때문입니다. 이런 장점들로 인해 Hibernate 보다는 Spring Data를 권장하고 있습니다. 프로젝트에 Spring Data Jpa 적용하기먼저 build.gradle에 다음과 같이 org.springframework.boot:spring-boot-starter-data-jpa와 com.h2database:h2의존성을 등록합니다. 123456789dependencies { compile('org.springframework.boot:spring-boot-starter-web') compile('org.projectlombok:lombok') --추가 부분-- compile('org.springframework.boot:spring-boot-starter-data-jpa') compile('com.h2database:h2') ------------ testCompile('org.springframework.boot:spring-boot-starter-test')} @spring-boot-starter-data-jpa 스프링 부트용 Spring Data Jpa추상화 라이브러리 입니다. 스프링 부트 버전에 맞춰 자동으로 JPA관련 라이브러리들의 버전을 관리해줍니다. h2 인메모리 관계형 데이터베이스입니다. 별도의 설치가 필요 없이 프로젝트 의존성만으로 관리할 수 있습니다. 메모리에서 실행되기 때문에 애플리케이션을 재시작할 때마다 초기화된다는 점을 이용하여 테스트 용도로 많이 사용됩니다. &nbsp;의존성이 등록되었다면, 본격적으로 JPA기능을 사용해 보겠습니다.com.BBBB.AAAA패키지 아래 domain이라는 패키지를 만들어줍니다.이 domain패키지는 도메인을 담을 패키지입니다. &nbsp;도메인이란 게시글, 댓글, 회원, 정산, 결제 등 소프트웨어에 대한 요구사항 혹은 문제 영역이라고 생각하면됩니다. 기존에 MyBatis와 같은 쿼리 매퍼를 사용했다면 dao 패키기를 떠올리겠지만, dao 패키지와는 조금 결이 다르다고 생각하면 됩니다. 그간 xml에 쿼리를 담고, 클래스는 오로지 쿼리의 결과만 담던 일들이 모두 도메인 클래스라고 불리는 곳에서 해결됩니다. domain 패키지아래에 posts패키지와 Posts클래스를 만듭니다. sr/main/java/패키지명/domain/posts/Post123456789101112131415161718192021222324252627282930import lombok.Builder;import lombok.Getter;import lombok.NoArgsConstructor;import javax.persistence.*;@Getter@NoArgsConstructor @Entity public class Posts { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private Long id; @Column(length = 500, nullable = false) private String title; @Column(columnDefinition = &quot;TEXT&quot;, nullable = false) private String content; private String author; @Builder public Posts(String title, String content, String author) { this.title = title; this.content = content; this.author = author; }} @Entity 테이블과 링크될 클래스임을 나타냅니다. 기본값으로 클래스의 카멜케이스 이름을 언더스코어 네이밍(_)으로 테이블 이름을 매칭합니다. ex) SalesManager.java → sales_manager table @Id 해당 테이블의 PK필드를 나타냅니다. @GeneratedValue PK의 생성 규칙을 나타냅니다. 스프링 부트 2.0에서는 GenerationType.IDENTITY 옵션을 추가해야만 auto_increment가 됩니다. @Column 테이블의 칼럼을 나타내며 굳이 선언하지 않더라도 해당 클래스의 필드는 모두 칼럼이 됩니다. 사용하는 이유는, 기본값 외에 추가로 변경이 필요한 옵션이 있으면 사용합니다. 문자열의 경우 VARCHAR(255)가 기본값인데, 사이즈를 500으로 늘리고 싶거나 (ex: title), 타입을 TEXT로 변경하고 싶거나(ex: content) 등의 경우에 사용됩니다. @NoArgsConstructor 기본 생성자 자동 추가 public Posts() {}와 같은 효과 @Getter 클래스 내 모든 필드의 Getter 메소드를 자동생성 @Builder 해당 클래스의 빌더 패턴 클래스를 생성 생성자 상단에 선언 시 생성자에 포함된 필드만 빌더에 포함 참고 Entity의 PK는 Long 타입의 Auto_increament를 추천합니다. 이유는 주민등록번호와 같이 비즈니스상 유니크 키나, 여러 키를 조합한 복합키로 PK를 잡을 경우 1.FK를 맺을 때 다른 테이블에서 복한키 전부를 갖고 있거나, 중간 테이블을 하나 더 둬야 하는 상황이 발생합니다. 2.인덱스에 좋은 영향을 끼치지 못합니다. 3.유니크한 조건이 변경될 경우 PK 전체를 수정해야 하는 일이 발생합니다. 주민등록번호, 복합키 등은 유니크 키로 별도로 추가하는 것을 추천합니다. 이 Posts클래스에는 한 가지 특이점이 있브니다. 바로 Setter메소드가 없다는 점입니다. Entity 클래스에서는 절대 Setter 메소드를 만들지 않습니다. 이유는 해당 클래스의 인스턴스 값들이 언제 어디서 변해야 하는지 코드상으로 명확하게 구분할 수가 없어, 차후 기능 변경 시 정말 복잡해지기 때문입니다. 대신, 해당 필드의 값 변경이 필요하면 명확히 그 목적과 의도를 나타낼 수 있는 메소드를 추가해야만 합니다. 잘못된 사용 예12345678public class Order{ public void setStatus(boolean status){ this.status = status; }}public void 주문서비스의_취소이벤트(){ order.setStatus(false);} 올바른 사용 예12345678public class Order{ public void cancelOrder(){ this.status = false; }}public void 주문서비스의_취소이벤트(){ order.cancelOrder();} Setter가 없는 상황에서 어떻게 값을 채워 DB에 삽입 해야할까요? 기본적인 구조는 생성자를 통해 최종값을 채운 후 DB에 삽입 하는 것 이며, 값 변경이 필요한 경우 해당 이벤트에 맞는 public 메소드를 호출하여 변경 하는 것을 전제로 합니다. 또 다른 방법으로는 @Builder를 통해 제공되는 빌더 클래스를 사용하는 것이다. 생성자나 빌더나 생성 시점에 값을 채워주는 역할은 똑같습니다. 다만, 생성자의 경우 지금 채워야 할 필드가 무엇인지 명확히 지정할 수 가 없습니다. 예를 들어 다음과 같은 코드가 있을 때 1234public Example(String a, String b) { this.a = a; this.b = b;} new Example(b, a)처럼 a와b의 위치를 변경해도 코드를 실행하기 전까지는 문제를 찾을 수가 없습니다.하지만 빌더를 사용하게 되면 다음과 같이 어느 필드에 어떤 값을 채워야 할지 명확하게 인지 할 수 있습니다. 1234Example.builder() .a(a) .b(b) .build(); Posts 클래스 생성이 끝났다면, Posts클래스로 Databas를 접근하게 해줄 JpaRepository를 생성합니다. src/main/java/패키지명/domain/posts/PostsRepository12345import org.springframework.data.jpa.repository.JpaRepository;public interface PostsRepository extends JpaRepository&lt;Posts, Long&gt; {} &nbsp;보통 ibatis나 MyBatis 등에서 Dao라고 불리는 DB layer접근자 입니다. JPA에선 Repository라고 부르며 인터페이스로 생성 합니다.단순히 인터페이스를 생성후, JpaRepository&lt;Entity 클래스, PK타입&gt;를 상속하면 기본적인 CRUD메소드가 자동으로 생성됩니다.@Repository를 추가할 필요도 없습니다. 주의할점 Entity클래스와 기본 Entity Repository는 함께 위치 해야 한다. Entity 클래스는 기본 Repository 없이는 제대로 역할을 할 수가 없습니다. Entity클래스와 기본 Repository는 함께 움직여야 하므로 도메인 패키지에서 함께 관리합니다. Spring Data JPA 테스트 코드 작성하기test디렉토리에 domain.posts패키지를 생성 후 PostsRepositoryTest클래스를 생성합니다. src/test/java/패키지명/domain/posts/PostsRepositoryTest123456789101112131415161718192021222324252627282930313233343536373839404142import org.junit.After;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;import java.util.List;import static org.assertj.core.api.Assertions.assertThat;@RunWith(SpringRunner.class)@SpringBootTestpublic class PostsRepositoryTest { @Autowired PostsRepository postsRepository; @After public void cleanup() { postsRepository.deleteAll(); } @Test public void 게시글저장_불러오기() { // given String title = &quot;테스트 게시글&quot;; String content = &quot;테스트 본문&quot;; postsRepository.save(Posts.builder() .title(title) .content(content) .author(&quot;ㅁㅁㅁㅁ@gmail.com&quot;) .build()); // when List&lt;Posts&gt; postsList = postsRepository.findAll(); Posts posts = postsList.get(0); assertThat(posts.getTitle()).isEqualTo(title); assertThat(posts.getContent()).isEqualTo(content); }} @After Junit에서 단위 테스트가 끝날 때마다 수행되는 메소드를 지정 보통은 배포 전 전체 테스트를 수행할 때 테스트간 데이터 침범을 막기 위해 사용합니다. 여러 테스트가 동시에 수행되면 테스트용 데이터베이스인 H2에 데이터가 그대로 남아 있어 다음 테스트 실행 시 테스트가 실패할 수 있습니다. postsRepository.save 테이블 posts에 insert/update 쿼리를 실행합니다 id 값이 있다면 update가, 없다면 insert 쿼리가 실행됩니다. postsRepository.findAll 테이블 posts에 있는 모든 데이터를 조회해오는 메소드입니다. 별다른 설정 없이 @SpringBootTest를 사용할 경우 H2 데이터베이스를 자동으로 실행해 줍니다. 실행된 쿼리를 로그로 출력만약 실제로 실행된 쿼리를 로그 형태로 보고싶다면 src/main/resources 디렉토리 아래 application.properties파일을 생성 하고 spring.jpa.show_sql=true를 작성 후 실행하면 됩니다. 출력되는 형태는 H2 문법이 적용된 로그입니다. 출력되는 쿼리 로그를 MySQL버전으로 변경하고싶다면 spring.jpa.properties.hibernate.dialect= org.hibernate.dialect.MySQL5InnoDBDialect 코드를 추가하면 된다. 등록/수정/조회 API 만들기API를 만들기 위해 총 3개의 클래스가 필요합니다. Request 데이터를 받을 Dto API 요청을 받을 Controller 트랜잭션, 도메인 기능 간의 순서를 보장하는 Service 여기서 많은 분들이 오해하고 계신 것이, Service에서 비지니스 로직을 처리해야 한다는 것입니다. 하지만 전혀 그렇지 않습니다. Service는 트랜잭션, 도메인 간 순서 보장의 역할만 합니다. 비지니스 로직을 처리하는 영역은 아래서 설명하겠습니다. Spring 웹 계층 각 영역을 소개하자면 다음과 같습니다. Web Layer 흔히 사용하는 컨트롤러(@Controller)와 JSP/Freemarker 등의 뷰 템플릿 영역입니다. 이외에도 필터(@Filter), 인터셉터, 컨트롤러 어드바이스(@ControllerAdvice)등 외부 요청과 응답에 대한 전반적인 영역을 이야기합니다. Service Layer @Service에 사용되는 서비스 영역입니다. 일반적으로 Controller와 Dao의 중간 영역에서 사용됩니다. @Transactional이 사용되어야 하는 영역이기도 합니다. Repository Layer Database와 같이 데이터 저장소에 접근하는 영역입니다. 기존에 개발하셨던 분들이라면 Dao(Data Access Object)영역으로 이해하시면 쉬울 것입니다. Dtos Dto(Data Transfer Object)는 계층 간에 데이터 교환을 위한 객체를 이야기하며 Dtos는 이들의 영역 을 얘기합니다. 예를 들어 뷰 템플릿 엔진에서 사용될 객체나 Repository Layer에서 결과로 넘겨준 객체 등이 이들을 이야기합니다. Domain Model 도메인이라 불리는 개발 대상을 모든 사람이 동일한 관점에서 이해할 수 있고 공유할 수 있도록 단순화시킨 것을 도메인 모델이라고 합니다. 이를테면 택시 앱이라고 하면 배차, 탑승, 요금 등이 모두 도메인이 될 수 있습니다. @Entity를 사용해보신 분들은 @Entity가 사용된 영역 역시 도메인 모델이라고 이해하면 됩니다. 다만, 무조건 데이터베이스의 테이블과 관계가 있어야만 하는 것은 아닙니다. VO처럼 값 객체들도 이 영역에 해당하기 때문입니다. Web(controller), Service, Repository, Dto, Domain, 이 5가지 레이어에서 비지니스 처리를 담당해야 할 곳은 Domain입니다. 기존에 서비스로 처리하던 방식을 트랜잭션 스크립트라고 합니다. 모든 로직이 서비스 클래스 내부에서 처리됩니다. 그러다 보니 서비스 계층이 무의미하며, 객체란 단순히 데이터 덩어리역활만 하게 됩니다. 반면 도메인 모델에서 처리할 경우 서비스 메소드는 트랜잭션과 도메인 간의 순서만 보장해 줍니다. 코드 작성이제 등록, 수정, 삭제 기능을 만들어 보겠습니다. web패키지에 PostsApiController, web.dto패키지에 PostsSaveRequestDto, service.posts패키지에 PostsService를 생성합니다. src/main/java/패키지명/web/PostsApiController12345678910111213141516import lombok.RequiredArgsConstructor;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RestController;@RequiredArgsConstructor@RestControllerpublic class PostsApiController { private final PostsService postsService; @PostMapping(&quot;/api/v1/posts&quot;) public Long save(@RequestBody PostsSaveRequestDto requestDto) { return postsService.save(requestDto); }} src/main/java/패키지명/service/PostsService1234567891011121314151617181920212223242526272829import lombok.RequiredArgsConstructor;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;@RequiredArgsConstructor@Servicepublic class PostsService { private final PostsRepository postsRepository; @Transactional public Long save(PostsSaveRequestDto requestDto){ return postsRepository.save(requestDto.toEntity()).getId(); } @Transactional public Long update(Long id, PostsUpdateRequestDto requestDto){ Posts posts = postsRepository.findById(id) .orElseThrow(()-&gt; new IllegalArgumentException(&quot;해당 게시글이 없습니다. id=&quot;+id)); posts.update(requestDto.getTitle(), requestDto.getContent()); return id; } public PostsResponseDto findById(Long id){ Posts entity = postsRepository.findById(id) .orElseThrow(()-&gt; new IllegalArgumentException(&quot;해당 게시글이 없습니다. id=&quot;+id)); return new PostsResponseDto(entity); }} Controller와 Service 코드를 살펴보면 @Autowired가 없는 것을 볼 수 있다. 스프링에서 Bean 주입 방식에는 3가지가 있다. @Autowired setter 생성자 이 중에서 가장 권장하는 방식이 생성자로 주입받는 방식입니다.(@Autowired는 권장하지 않습니다.)즉, 생성자로 Bean객체를 받도록 하면 @Autowired와 동일한 효과를 볼 수 있다는 것입니다.위 코드에서는 생성자로 Bean을 주입 하는 부분이 없지만 @RequiredArgsConstructor가 해결해 줍니다. @RequiredArgsConstructor는 final로 선언된 모든 필드를 인자값으로 하는 생성자를롬복의 @RequiredArgsConstructor가 대신 생성해 준 것입니다. 생성자를 직접 안 쓰고 롬복 @RequiredArgsConstructor를 사용한 이유해당 클래스의 의존성 관계가 변경될 때마다 생성자 코드를 계속해서 수정하는 번거로움을 해결하기 위함입니다. 롬복 어노테이션이 있으면 해달 컨트롤러에 새로운 서비스를 추가하거나, 기존 컴포넌트를 제거하는 등의 상황이 발생해도 생성자 코드는 전혀 손대지 않아도 됩니다. 이제는 Controller와 Service에서 사용할 Dto클래스를 생성하겠습니다. src/main/java/패키지명/web/dto/PostsSaveRequestDto1234567891011121314151617181920212223242526import lombok.Builder;import lombok.Getter;import lombok.NoArgsConstructor;@Getter@NoArgsConstructorpublic class PostsSaveRequestDto { private String title; private String content; private String author; @Builder public PostsSaveRequestDto(String title, String content, String author) { this.title = title; this.content = content; this.author = author; } public Posts toEntity() { return Posts.builder() .title(title) .content(content) .author(author) .build(); }} 여기서 Entity클래스와 거의 유사한 형태임에도 Dto클래스를 추가로 생성했습니다.하지만, 절대로 Entity 클래스를 Request/Response 클래스로 사용해서는 안됩니다. Entity클래스와 Dto클래스를 분리해서 사용해야 하는 이유&nbsp;Entity클래스는 데이터베이스와 맞닿은 핵심 클래스 입니다. Entity클래스를 기준으로 테이블이 생성되고, 스키마가 변경됩니다. 화면 변경은 아주 사소한 기능 변경인데, 이를 위해 테이블과 연결된 Entity클래스를 변경하는 것은 너무 큰 변경입니다. 수많은 서비스 클래스나 비즈니스 로직들이 Entity클래스를 기준으로 동작합니다. Entity클래스가 변경되면 여러 클래스에 영향을 끼치지만, Request와 Response용 Dto는 View를 위한 클래스라 정말 자주 변경이 필요합니다. &nbsp; View Layer와 DB Layer의 역할 분리를 철저하게 하는 게 좋습니다. 실제로 Controller에서 결과값으로 여러 테이블을 조인해서 줘야 할 경우가 빈번하므로 Entity클래스만으로 표현하기가 어려운 경우가 많습니다.&nbsp;그렇기 때문에 Entity클래스와 Controller에 쓸 Dto는 분리해서 사용해야 합니다. 테스트 코드로 검증하기src/test/java/패키지명/web/PostsApiControllerTest1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859import org.junit.After;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.boot.test.web.client.TestRestTemplate;import org.springframework.boot.web.server.LocalServerPort;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.test.context.junit4.SpringRunner;import java.util.List;import static org.assertj.core.api.Assertions.assertThat;@RunWith(SpringRunner.class)@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)public class PostsApiControllerTest { @LocalServerPort private int port; @Autowired private TestRestTemplate restTemplate; @Autowired private PostsRepository postsRepository; @After public void tearDown() throws Exception{ postsRepository.deleteAll(); } @Test public void Posts_등록된다() throws Exception{ //given String title =&quot;title&quot;; String content = &quot;content&quot;; PostsSaveRequestDto requestDto = PostsSaveRequestDto.builder() .title(title) .content(content) .author(&quot;author&quot;) .build(); String url = &quot;http://localhost:&quot;+port+&quot;/api/v1/posts&quot;; //when ResponseEntity&lt;Long&gt; responseEntity = restTemplate.postForEntity(url, requestDto, Long.class); //then assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.OK); assertThat(responseEntity.getBody()).isGreaterThan(0L); List&lt;Posts&gt; all = postsRepository.findAll(); assertThat(all.get(0).getTitle()).isEqualTo(title); assertThat(all.get(0).getContent()).isEqualTo(content); }} &nbsp;Api Controller를 테스트하는데 HelloController와 달리 @WebMvcTest를 사용하지 않았습니다.@WebMvcTest의 경우 JPA기능이 작동하지 않기때문인데, Controller와 ControllerAdvice 등 외부 연동과 관련된 부분만 활성화되니 지금같이 JPA기능 까지 한번에 테스트할 때는 @SpringBootTest와 TestRestTemplate을 사용하면 됩니다. 등록 기능을 완성했으니 수정/조회 기능도 만들어봅시다. PostsApiController1234567891011121314151617@RequiredArgsConstructor@RestControllerpublic class PostsApiController {...중략 @PutMapping(&quot;/api/v1/posts/{id}&quot;) public Long update(@PathVariable Long id, @RequestBody PostsUpdateRequestDto requestDto){ return postsService.update(id, requestDto); } @GetMapping(&quot;/api/v1/posts/{id}&quot;) public PostsResponseDto findById (@PathVariable Long id){ return postsService.findById(id); }} src/main/java/패키지명/web/dto/PostsResponseDto1234567891011121314@Getterpublic class PostsResponseDto { private Long id; private String title; private String content; private String author; public PostsResponseDto(Posts entity) { this.id = entity.getId(); this.title = entity.getTitle(); this.content = entity.getContent(); this.author = entity.getAuthor(); }} PostsResponseDto는 Entity의 필드 중 일부만 사용하므로 생성자로 Entity를 받아 필드에 값을 넣습니다. 굳이 모든 필드를 가진 생성자가 필요하진 않으므로 Dto는 Entity를 받아 처리합니다. src/main/java/패키지명/web/dto/PostsUpdateRequestDtoResponseDto12345678910111213141516import lombok.Builder;import lombok.Getter;import lombok.NoArgsConstructor;@Getter@NoArgsConstructorpublic class PostsUpdateRequestDto { private String title; private String content; @Builder public PostsUpdateRequestDto(String title,String content){ this.title=title; this.content=content; }} src/main/java/패키지명/domain/posts/Posts12345678public class Posts { ...중략 public void update(String title, String content) { this.title = title; this.content = content; }} src/main/java/패키지명/service/posts/PostsService12345678910111213141516171819202122232425@RequiredArgsConstructor@Servicepublic class PostsService { ...중략 @Transactional public Long save(PostsSaveRequestDto requestDto){ return postsRepository.save(requestDto.toEntity()).getId(); } @Transactional public Long update(Long id, PostsUpdateRequestDto requestDto){ Posts posts = postsRepository.findById(id) .orElseThrow(()-&gt; new IllegalArgumentException(&quot;해당 게시글이 없습니다. id=&quot;+id)); posts.update(requestDto.getTitle(), requestDto.getContent()); return id; } public PostsResponseDto findById(Long id){ Posts entity = postsRepository.findById(id) .orElseThrow(()-&gt; new IllegalArgumentException(&quot;해당 게시글이 없습니다. id=&quot;+id)); return new PostsResponseDto(entity); }} &nbsp;여기서 신기한 것이 있습니다. update기능에서 데이터베이스에 쿼리를 날리는 부분이 없습니다.**이게 가능한 이유는 **JPA의 영속성 컨텍스트 때문입니다. &nbsp;영속성 컨텍스트란, 엔티티를 영구 저장하는 환경입니다. 일종의 논리적 개념이라고 보면 되며, JPA의 핵심 내용은 엔티티가 영속성 컨텍스트에 포함되어 있냐 아니냐로 갈립니다. &nbsp;JPA의 엔티티 매니저가 활성화된 상태로(Spring Data Jpa를 쓴다면 기본 옵션) 트랜젝션 안에서 데이터베이스에서 데이터를 가져오면 이 데이터는 영속성 컨텍스트가 유지된 상태입니다. &nbsp;이 상태에서 해당 데이터의 값을 변경하면 트랜잭션이 끝나는 시점에 해당 테이블에 변경분을 반영합니다. 즉, Entity객체의 값만 변경하면 별도로 Update쿼리를 날릴 필요가 없다는 것이죠. 이 개념을 더티 체킹이라고 합니다. 이제 실제로 이 코드가 정상적으로 Update쿼리를 수행하는지 테스트 코드로 확인해 봅시다.수정 기능의 테스트 코드는 등록 기능과 마찬가지로 PostApiControllerTest에 추가하겠습니다. src/test/java/패키지명/web/PostsApiControllerTest123456789101112131415161718192021222324252627282930313233343536373839@RunWith(SpringRunner.class)@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)public class PostsApiControllerTest {...중략@Test public void Posts_수정된다() throws Exception { //given Posts savedPosts = postsRepository.save(Posts.builder() .title(&quot;titile&quot;) .content(&quot;content&quot;) .author(&quot;author&quot;) .build()); Long updateId = savedPosts.getId(); String expectedTitle=&quot;title2&quot;; String expectedContent=&quot;content2&quot;; PostsUpdateRequestDto requestDto = PostsUpdateRequestDto.builder() .title(expectedTitle) .content(expectedContent) .build(); String url =&quot;http://localhost:&quot;+port+&quot;/api/v1/posts/&quot;+updateId; HttpEntity&lt;PostsUpdateRequestDto&gt; requestEntity = new HttpEntity&lt;&gt;(requestDto); //when ResponseEntity&lt;Long&gt; responseEntity = restTemplate.exchange(url, HttpMethod.PUT, requestEntity, Long.class); //then assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.OK); assertThat(responseEntity.getBody()).isGreaterThan(0L); List&lt;Posts&gt; all = postsRepository.findAll(); assertThat(all.get(0).getTitle()).isEqualTo(expectedTitle); assertThat(all.get(0).getContent()).isEqualTo(expectedContent); }} 조회 기능은 실제로 톰캣을 실행해서 확인해 보겠습니다. 1.application.properties에 spring.h2.console.enabled=true 코드 추가 합니다. 2.추가한 뒤 Application클래스의 main메소드를 실행합니다. 3.웹 브라우저에서 http://localhost:8080/h2-console로 접속합니다. 4.JDBC URL: jdbc:h2:mem:testdb로 되있는지 확인한다. 만약 다르다면 수정해준다. 5.확인 후 아래 Connect버튼을 클릭한다. 그러면 H2를 관리할 수 있는 관리 페이지로 이동합니다.POSTS테이블이 정상적으로 노출되어야만 합니다. 간단하게 insert쿼리를 실행해보고 이를 API로 조회해 보겠습니다.**insert into posts (author, content, title) values(‘author’, ‘content’, ‘title’);**을 입력하고 Run을 클릭합니다.등록후 http://localhost:8080/api/v1/posts/1으로 이동하여 API조회 기능을 테스트해 봅니다. JPA Audtiting을 이용한 등록/수정 시간 자동화&nbsp; 보통 엔티티에는 해당 데이터의 생성시간과 수정시간을 포함합니다.언제 만들어졌는지, 언제 수정되었는지 등은 차후 유지보수에 있어서 중요한 정보입니다. 그렇기 때문에 DB에 삽입하기 전, 갱신 하기 전에 날짜 데이터를 등록/수정하는 코드가 여기저기 들어가게 됩니다. LocalData사용하기Java8부터 LocalDate와 LocalDateTime이 등장했습니다. 이는 Java의 기본 날짜 타입인 Date의 문제점을 고친 타입이라 Java9일 경우 무조건 써야 한다고 생각하면 됩니다. Java8 이전 Date/Calendar 클래스의 문제점 1.불변 객체가 아닙니다. 멀티스레드 환경에서 언제든 문제가 발생할 수 있습니다. 2.Calendar는 월(Month) 값 설계가 잘못되었습니다. 10월을 나타내는 Calendar.OCTOBER의 숫자 값은 ‘9’입니다. 당영히 ‘10’으로 생각했던 개발자들에게는 큰 혼란이 왔습니다. jodaTime이라는 오픈소스를 사용해서 문제점들을 피했었고, java8에선 LocalDate를 통해 해결했습니다. domain패키지에 BaseTimeEntity클래스를 생성합니다. 123456789101112131415161718192021import lombok.Getter;import org.springframework.data.annotation.CreatedDate;import org.springframework.data.annotation.LastModifiedDate;import org.springframework.data.jpa.domain.support.AuditingEntityListener;import javax.persistence.EntityListeners;import javax.persistence.MappedSuperclass;import java.time.LocalDate;import java.time.LocalDateTime;@Getter@MappedSuperclass@EntityListeners(AuditingEntityListener.class)public class BaseTimeEntity { @CreatedDate private LocalDateTime createdDate; @LastModifiedDate private LocalDateTime modifiedDate;} @MappedSuperclass JPA Entity 클래스들이 BaseTimeEntity을 상속할 경우 필드들(createdDate, modifiedDate)도 칼럼으로 인식하도록 합니다. @EntityListeners BaseTimeEntity 클래스에 Auditing 기능을 포함시킵니다. @CreatedDate Entity가 생성되어 저장될 때 시간이 자동 저장됩니다. @LastModifiedDate 조회한 Entity의 값을 변경할 때 시간이 자동으로 저장됩니다. 그리고 Posts클래스가 BaseTimeEntity를 상속받도록 변경합니다. 123public class Posts extends BaseTimeEntity {...증략} 마지막으로 JPA Auditing 어노테이션들을 모두 활성화할 수 있도록 Application클래스에 활성화 어노테이션 하나를 추가하겠습니다. 1234567@EnableJpaAuditing // JPA Auditing 활성화@SpringBootApplicationpublic class Application { public static void main(String[] args) { SpringApplication.run(Application.class, args); }} JPA Auditing테스트 코드 작성PostsRepositoryTest클래스에 데스트 메소드를 하나 더 추가하겠습니다. 12345678910111213141516171819202122 @Test public void BaseTimeEntity_등록() { // given LocalDateTime now = LocalDateTime.of(2020,2,25,0,0,0); postsRepository.save(Posts.builder() .title(&quot;title&quot;) .content(&quot;content&quot;) .author(&quot;author&quot;) .build()); // when List&lt;Posts&gt; postsList = postsRepository.findAll(); // then Posts posts = postsList.get(0); System.out.println(&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; createDate=&quot;+posts.getCreatedDate()+&quot;, modifiedDate=&quot;+posts.getModifiedDate()); assertThat(posts.getCreatedDate()).isAfter(now); assertThat(posts.getModifiedDate()).isAfter(now); }}","link":"/2021/01/10/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8%EC%97%90%EC%84%9CJPA%EB%A1%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EB%8B%A4%EB%A3%A8%EA%B8%B0/"}],"tags":[{"name":"hexo, 깃허브 블로그","slug":"hexo-깃허브-블로그","link":"/tags/hexo-%EA%B9%83%ED%97%88%EB%B8%8C-%EB%B8%94%EB%A1%9C%EA%B7%B8/"},{"name":"스프링 부트와 AWS로 혼자 구현하는 웹 서비스","slug":"스프링-부트와-AWS로-혼자-구현하는-웹-서비스","link":"/tags/%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B6%80%ED%8A%B8%EC%99%80-AWS%EB%A1%9C-%ED%98%BC%EC%9E%90-%EA%B5%AC%ED%98%84%ED%95%98%EB%8A%94-%EC%9B%B9-%EC%84%9C%EB%B9%84%EC%8A%A4/"},{"name":"스프링 부트와 AWS로 혼자 구현하는 웹 서비스, 테스트 코드","slug":"스프링-부트와-AWS로-혼자-구현하는-웹-서비스-테스트-코드","link":"/tags/%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B6%80%ED%8A%B8%EC%99%80-AWS%EB%A1%9C-%ED%98%BC%EC%9E%90-%EA%B5%AC%ED%98%84%ED%95%98%EB%8A%94-%EC%9B%B9-%EC%84%9C%EB%B9%84%EC%8A%A4-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C/"},{"name":"스프링 부트와 AWS로 혼자 구현하는 웹 서비스, JPA","slug":"스프링-부트와-AWS로-혼자-구현하는-웹-서비스-JPA","link":"/tags/%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B6%80%ED%8A%B8%EC%99%80-AWS%EB%A1%9C-%ED%98%BC%EC%9E%90-%EA%B5%AC%ED%98%84%ED%95%98%EB%8A%94-%EC%9B%B9-%EC%84%9C%EB%B9%84%EC%8A%A4-JPA/"}],"categories":[{"name":"test","slug":"test","link":"/categories/test/"},{"name":"springboot","slug":"springboot","link":"/categories/springboot/"}]}