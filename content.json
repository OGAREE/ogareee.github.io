{"pages":[],"posts":[{"title":"TEST","text":"제목안녕하세요","link":"/2021/01/05/TEST/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2021/01/04/hello-world/"},{"title":"연습","text":"markdown 오늘 배운 내용 hexo markdown 오늘 만난 사람 오늘 생각한 아이디어 오늘은 markdown을 살짝 배웠어요!! 구글링 해서 찾아봐야지!!구글링하러 gogo!! 12345678910111213141516171819202122232425262728# markdown### 개요 ------TIL ( Today I Learned ) 블로그를 하는 목적- markdown ([총정리블로그](https://heropy.blog/2017/09/30/markdown/) ) &amp; vim 숙련- 잔디밭&lt;br&gt;#### 최근 들은 세션------1. 처음 시작하는 Git/Github 활용하기 ( OOS 개발자 포럼, 박희찬슈퍼 개발자님 ) [강의자료](https://bit.ly/git-starter)&lt;br&gt;#### 학습할자료------[슈퍼어메이징한터미널세팅](https://johngrib.github.io/wiki/my-mac-os-terminal/?fbclid=IwAR2QRRoeZv6L2sMbwmecLI5xJRObKmFHwxPmQ8OqR06w31Q8LcIpRijIfVs)[초보몽키개발공부로그](https://wayhome25.github.io/)[hexo적용한블로그태마깃헙](https://github.com/ppoffice/hexo-theme-icarus)[hexo적용한블로그사용법페이지](https://blog.zhangruipeng.me/hexo-theme-icarus/)[재원님disqus댓글기능추가하는방법](https://cresumerjang.github.io/2019/11/17/hexo-add-comments/?fbclid=IwAR0bHcNEprnoP1-28DVBkGq32MXaN_e4jGmhsF03XCNZsOgyzxj_aTkaHrU)&lt;br&gt;","link":"/2021/01/05/%EC%97%B0%EC%8A%B5/"},{"title":"스프링부트_시작하기","text":"* 스프링 부트와 AWS로 혼자 구현하는 웹 서비스(프리렉, 이동욱 지음)책을 통해 공부한 내용을 정리한 글입니다. * 목록 그레이들 프로젝트 변경 코드 리뷰그레이들 프로젝트 변경 먼저 intellij에서 gradle기반의 자바 프로젝트를 생성합니다.프로젝트 생성후 build.gradle 파일을 열어 보면 다음과 같은 코드가 있습니다. build.gradle 초기 상태12345678910111213141516plugins: { 'java'}group 'com.doop.book'version '1.0-SNAPSHOT'sourceCompatibility = 1.8repositories { mavenCentral()}dependencies { testCompile group: 'junit', name: 'junit', version: '4.12'} 이 코드들은 자바 개발에 가장 기초적인 설정만 되어있는 상태입니다. 이 코드에 스프링 부트에 필요한 설정들을 추가해 봅시다. build.gradle 수정후123456789101112131415161718192021222324252627282930buildscript { ext { springBootVersion = '2.1.7.RELEASE' } repositories { mavenCentral() jcenter() } dependencies { classpath(&quot;org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}&quot;) }}apply plugin: 'java'apply plugin: 'eclipse'apply plugin: 'org.springframework.boot'apply plugin: 'io.spring.dependency-management'group 'com.doop.book'version '1.0-SNAPSHOT'sourceCompatibility = 1.8repositories { mavenCentral()}dependencies { compile('org.springframework.boot:spring-boot-starter-web') testCompile('org.springframework.boot:spring-boot-starter-test')} 코드 리뷰123456789101112buildscript { ext { springBootVersion = '2.1.7.RELEASE' } repositories { mavenCentral() jcenter() } dependencies { classpath(&quot;org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}&quot;) }} 이 코드는 프로젝트의 프러그인 의존성 관리를 위한 설정입니다.(인텔리제이의 플러그인 관리는 아님니다.)ext 라는 키워드는 build.gradle에서 사용하는 전역변수를 전역변수로 사용하겠다는 의미인데, 이 코드에서는 springBootVersion 라는 전역변수를 선언 후 값을 2.1.7.RELEASE로 하겠다는 의미입니다.classpath줄은 ‘spring-boot-gradle-plugin’ 라는 스프링 부트 그레이들 플러그인의 2.1.7.RELEASE를 의존성으로 받겠다는 의미입니다. 1234apply plugin: 'java'apply plugin: 'eclipse'apply plugin: 'org.springframework.boot'apply plugin: 'io.spring.dependency-management' 위의 플러그인 4개는 자바와 스프링 부트를 사용하기 위한 필수 플러그인입니다.io.spring.dependency.management 플러그인은 스프링 부트의 의존성을 관리해 주는 플러그인이라 꼭 추가해야 합니다. 123456789repositories { mavenCentral() jcenter()}dependencies { compile('org.springframework.boot:spring-boot-starter-web') testCompile('org.springframework.boot:spring-boot-starter-test')} repositories는 각종 의존성(라이브러리)들을 어떤 원격 저장소에서 받을지를 정합니다.기본적으로 mavenCentral을 많이 사용하지만, 최근에는 라이브러리 업로드 난이도 때문에 jcenter도 많이 사용합니다.dependencies는 프로젝트 개발에 필요한 의존성들을 선언하는 곳입니다.인텔리제이는 메이븐 저장소의 데이터를 인덱싱해서 관리하기 때문에 의존성 자동완성이 가능합니다.complie 메소드 안에 라이브러리의 이름의 앞부분만 추가한 뒤 자동완성(Ctrl+Space) 을 사용하면 라이브러리 목록을 확인 할 수 있습니다.의존성 코드는 직접 작성해도 되고, 자동완성으로 작성해도 됩니다.단, 특정 버전을 명시하면 안 됩니다. 왜냐하면 버전을 명시하지 않아야만 맨위에 작성한 org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion} 의 버전을 따라가게 됩니다. build.gradle에 반영하기코드 설정이 끝이나면 오른쪽 하단에 Event Log에서 build.gradle에 변경이 있으니 반영하라 라는 알람이 나옵니다.[Import Changes]는 1회 변경을 허용하는 것이고, [Enable Auto-Import]는 수정될때 마다 자동으로 반영이 되는 것입니다.(필자는 이것이 나오지 않아 수동으로 반영하였다.)","link":"/2021/01/06/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/"}],"tags":[{"name":"hexo, 깃허브 블로그","slug":"hexo-깃허브-블로그","link":"/tags/hexo-%EA%B9%83%ED%97%88%EB%B8%8C-%EB%B8%94%EB%A1%9C%EA%B7%B8/"},{"name":"스프링 부트와 AWS로 혼자 구현하는 웹 서비스","slug":"스프링-부트와-AWS로-혼자-구현하는-웹-서비스","link":"/tags/%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B6%80%ED%8A%B8%EC%99%80-AWS%EB%A1%9C-%ED%98%BC%EC%9E%90-%EA%B5%AC%ED%98%84%ED%95%98%EB%8A%94-%EC%9B%B9-%EC%84%9C%EB%B9%84%EC%8A%A4/"}],"categories":[{"name":"test","slug":"test","link":"/categories/test/"},{"name":"springboot","slug":"springboot","link":"/categories/springboot/"}]}